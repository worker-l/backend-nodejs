#!/bin/bash

# In order to cross-compile node for Android using NDK, run:
#   source android-configure <path_to_ndk> [arch]
#
# By running android-configure with source, will allow environment variables to
# be persistent in current session. This is useful for installing native node
# modules with npm. Also, don't forget to set the arch in npm config using
# 'npm config set arch=<arch>'

# if [ $# -ne 3 ]; then
#   echo "$0 should have 3 parameters: ndk_path, target_arch and sdk_version"
#   exit 1
# fi

OHOS_SDK=$1
ARCH="$2"
WITH_SSL=$3

echo $OHOS_SDK:$ARCH:$WITH_SSL

CC_VER="4.9"

case $ARCH in
    arm)
        DEST_CPU="arm"
        HOST_M32=" -m32"
		MARCH="armv7-a"
		TARGET=" --target=arm-linux-ohos -march=armv7-a"
        ;;
    x86)
        DEST_CPU="ia32"
        HOST_M32=" -m32"
		MARCH=""
		TARGET=""
        ;;
    x86_64)
        DEST_CPU="x64"
        ARCH="x64"
        HOST_M32=""
		MARCH=""
		TARGET=""
        ;;
    arm64|aarch64)
        DEST_CPU="arm64"
        ARCH="arm64"
        HOST_M32=""
		MARCH="armv8-a"
		TARGET=" --target=aarch64-linux-ohos -march=armv8-a"
        ;;
    *)
        echo "Unsupported architecture provided: $ARCH"
        exit 1
        ;;
esac

HOST_OS="linux"
#export TARGET_OS=ohos
TARGET_OS=linux
export HOST_ARCH="x64"
export CC_host=$(command -v gcc)
export CXX_host=$(command -v g++)

host_gcc_version=$($CC_host --version | grep gcc | awk '{print $NF}')
major=$(echo $host_gcc_version | awk -F . '{print $1}')
minor=$(echo $host_gcc_version | awk -F . '{print $2}')
if [ -z $major ] || [ -z $minor ] || [ $major -lt 6 ] || [ $major -eq 6 -a $minor -lt 3 ]; then
  echo "host gcc $host_gcc_version is too old, need gcc 6.3.0"
  exit 1
fi
export OHOS_SDK=$OHOS_SDK
export CC_host=$CC_host$HOST_M32
export CXX_host=$CXX_host$HOST_M32
export AR_host="ar"
export RANLIB_host="ranlib"
export LINK_host="${CXX_host}" 
TOOLCHAIN=$OHOS_SDK/native/llvm
export PATH=$TOOLCHAIN/bin:$PATH
#export SYSROOT=$OHOS_SDK/native/sysroot
export AS=$TOOLCHAIN/bin/llvm-as
export CC=$TOOLCHAIN/bin/clang$TARGET
export CXX=$TOOLCHAIN/bin/clang++$TARGET
export LD=$TOOLCHAIN/bin/lld$TARGET
export STRIP=$TOOLCHAIN/bin/llvm-strip
export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
export OBJDUMP=$TOOLCHAIN/bin/llvm-objdump
export OBJCOPY=$TOOLCHAIN/bin/llvm-objcopy
export NM=$TOOLCHAIN/bin/llvm-nm
export AR=$TOOLCHAIN/bin/llvm-ar
export CFLAGS="-fPIC -march=$MARCH -D__MUSL__=1 -Wno-c99-extensions -Wno-strict-prototypes -Wno-deprecated-non-prototype -Wno-unqualified-std-cast-call -Wno-long-long"
export CXXFLAGS="-fPIC -march=$MARCH -D__MUSL__=1 -Wno-c99-extensions -Wno-strict-prototypes -Wno-deprecated-non-prototype -Wno-unqualified-std-cast-call -Wno-long-long"
export LDFLAGS="-pie -Wl,--hash-style=both "
GYP_DEFINES="target_arch=$ARCH"
GYP_DEFINES+=" v8_target_arch=$ARCH"
GYP_DEFINES+=" host_arch=$HOST_ARCH"
GYP_DEFINES+=" v8_host_arch=$HOST_ARCH"
GYP_DEFINES+=" host_os=$HOST_OS OS=$TARGET_OS"
export GYP_DEFINES


if [ -f "configure" ]; then
  if [ $WITH_SSL == "" ]; then 
    ./configure \
        --dest-cpu=$DEST_CPU \
        --dest-os=$TARGET_OS \
        --without-snapshot \
        --without-ssl \
        --with-intl=none \
        --enable-static \
        --cross-compiling \
		--v8-options="--host-arch=$HOST_ARCH --target-arch=$ARCH"
  else 
    ./configure \
        --dest-cpu=$DEST_CPU \
        --dest-os=$TARGET_OS \
        --without-snapshot \
        --openssl-no-asm \
        --with-intl=none \
		--enable-static \
        --cross-compiling \
		--v8-options="--host-arch=$HOST_ARCH --target-arch=$ARCH"
  fi
fi